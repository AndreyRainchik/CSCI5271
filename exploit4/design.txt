BCVI violated several security design principles that if followed, would have caused less security vulnerabilities to be available for exploitation.

One big violation is that of Saltzer & Schroeder's principles of fail-safe defaults. BCVI operated with a blacklist at best, and with full user permissions at worst for many of its vulnerable iterations. For example, the ex-mode functionality of BCVI operated without any checks, and the macro capability ran with only a blacklist, and both of these created vulnerabilities where a user could become root. These would have been remediated if BCVI operated on a whitelist-only principle and didn't give permissions to the user that they should not have had.

Another violation is that of the lack of establising and checking invariants to make sure that the state of the program is consistently maintained. One such violation is that BCVI doesn't check to see if the filename that it's given is a symlink, and as a result, it doesn't check to see if the symlink resolves to the same file location as when it was opened to when it was written to. This caused a vulnerability where a user could overwrite privileged system files that they shouldn't have had write access to. The design would have been improved if BCVI set up pre- and postconditions to verify whether the state of the program is the same before any unsafe operation as it is after. This would have prevented the symlink vulnerability, and if more conditions were created throughout the program, other vulnerabilities would have been prevented too.

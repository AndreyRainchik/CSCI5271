San Min Liew: liewx024@umn.edu
Andrey Rainchik: rainc001@umn.edu

This exploit takes advantage of a vulnerability in BCVI where it doesn't check to see if the file that it opens and the file that it writes to are the same, it only works off of the file path that it's given. This means that if a symlink is created to point to a file, opened in sudobcvi, changed to point to somewhere else, and written to in sudobcvi, the second file will be overwritten with the content of the first file.

The exploit script generates several key files for it to use:
group: a copy of /etc/group with the test user added to the sudo and adm groups
shadow: a copy of /etc/shadow with the test user changed to have a blank password
testsym: an expect script to change the destination of a symlink "test" to /etc/group and then later in the exploit, /etc/shadow
expecttest: an expect script to open the symlink "test" in sudobcvi, call testsym to change where test points to, and then write the file and quit sudobcvi
sshkey: an expect script to generate an ssh key for the test user
ssh: an expect script to connect to test@localhost and run "sudo /bin/rootshell"

The exploit works by changing where the symlink "test" points to. First, it points to the file "group." Then, after a call to expecttest, it points to /etc/group, which has been overwritten with the contents of "group." This causes the test user to gain access to the sudo command, but the sudo command requires a password prompt, and as the test user has no password to use, it doesn't have access to sudo.

This is why the exploit script then overwrites the content of /etc/shadow with the file "shadow." This gives the test user an empty password, as compared to no password.

However, changes to the groups a user is part of requires a user to log out and back in, but this can be emulated by logging in to the localhost through ssh. Unfortunately, ssh specifically prohibits logging in with an empty password, so a key pair must be generated through the sshkey script. The key is then placed into the authorized_keys file.

Finally, the ssh script connects to the localhost through ssh, and once it receives a command prompt, it runs sudo /bin/rootshell, which won't need a password input thanks to the /etc/passwd modification, and a root shell pops.

Sources I used:
https://stackoverflow.com/questions/39574141/using-nested-spawn-method-in-expect-scripts for ideas about the expecttest script
https://stackoverflow.com/questions/7439563/how-to-ssh-to-localhost-without-password for ideas on sshing to localhost without a password
